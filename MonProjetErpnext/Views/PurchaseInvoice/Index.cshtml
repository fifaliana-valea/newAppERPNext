@model List<MonProjetErpnext.Models.PurchaseInvoice.PurchaseInvoice>
@{
    ViewData["Title"] = "Liste des Factures d'Achat";
    int currentPage = ViewBag.CurrentPage ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
    string statusFilter = ViewBag.StatusFilter;
}

<style>
.invoice-container {
    background-color: var(--light-bg);
    border-radius: 10px;
    box-shadow: 0 4px 20px rgba(108, 92, 231, 0.1);
    padding: 2rem;
    margin-bottom: 2rem;
    border: 1px solid var(--border-color);
}

.invoice-header {
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 1rem;
    margin-bottom: 1.5rem;
}

.invoice-title {
    color: var(--primary-color);
    font-weight: 600;
}

.status-badge {
    padding: 0.35rem 0.75rem;
    border-radius: 50px;
    font-size: 0.8rem;
    font-weight: 600;
}

.badge-paid {
    background-color: #28a745;
    color: white;
}

.badge-unpaid {
    background-color: #dc3545;
    color: white;
}

.badge-draft {
    background-color: #6c757d;
    color: white;
}

.badge-overdue {
    background-color: #fd7e14;
    color: white;
}

.items-table-container {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 15px rgba(108, 92, 231, 0.1);
    margin-top: 1rem;
    border: 1px solid var(--border-color);
}

.scrollable-table {
    max-height: 300px;
    overflow-y: auto;
    display: block;
}

.table thead th {
    position: sticky;
    top: 0;
    background-color: var(--primary-color);
    color: white;
    z-index: 1;
    border-bottom: none;
}

.table tbody tr:hover {
    background-color: var(--hover-color);
}

.amount-positive {
    color: #28a745;
}

.amount-negative {
    color: #dc3545;
}

.invoice-card {
    margin-bottom: 2rem;
    border-left: 4px solid var(--primary-color);
    background-color: var(--light-bg);
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(108, 92, 231, 0.1);
    transition: transform 0.3s ease;
}

.invoice-card:hover {
    transform: translateY(-3px);
}

.invoice-card-header {
    background-color: var(--light-bg);
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    border-radius: 8px 8px 0 0;
}

.info-label {
    font-weight: 600;
    color: var(--text-color);
}

.info-value {
    color: var(--text-color);
}

/* Pagination */
.pagination-container {
    margin-top: 2rem;
    margin-bottom: 2rem;
}

.page-item.active .page-link {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: white;
}

.page-link {
    color: var(--primary-color);
    border: 1px solid var(--border-color);
    margin: 0 3px;
    border-radius: 6px !important;
    transition: all 0.3s ease;
}

.page-link:hover {
    color: var(--primary-color);
    background-color: var(--hover-color);
    border-color: var(--border-color);
}

.filter-form {
    background-color: var(--light-bg);
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
    border: 1px solid var(--border-color);
}

.btn-primary {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.btn-primary:hover {
    background-color: #5e4bc0;
    border-color: #5e4bc0;
}

.download-btn {
    display: inline-block; /* Assurez-vous qu'il s'affiche */
    visibility: visible; /* Vérifiez qu'il est visible */
}


.btn-outline-secondary {
    color: var(--primary-color);
    border-color: var(--border-color);
}

.btn-outline-secondary:hover {
    background-color: var(--hover-color);
    color: var(--primary-color);
    border-color: var(--border-color);
}

.invoice-card-footer {
    background-color: #f8f9fa;
    border-top: 1px solid #eee;
    padding: 15px;
}

.validate-btn, .pay-btn {
    min-width: 120px;
}

.validate-btn:hover {
    background-color: #0069d9;
    border-color: #0062cc;
}

.pay-btn:hover {
    background-color: #218838;
    border-color: #1e7e34;
}

/* Animation */
@@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

.invoice-card {
    animation: fadeIn 0.4s ease forwards;
}
</style>

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-md-12">
            <h2><i class="fas fa-file-invoice-dollar"></i> @ViewData["Title"]</h2>
        </div>
    </div>

    <!-- Formulaire de filtrage -->
    <div class="row">
        <div class="col-md-12 filter-form">
            <form method="get" class="form-inline">
                <div class="form-group mr-3">
                    <label for="status" class="mr-2">Statut :</label>
                    <select id="status" name="status" class="form-control">
                        <option value="">Tous</option>
                        <option value="Paid" selected="@(statusFilter == "Paid")">Payé</option>
                        <option value="Unpaid" selected="@(statusFilter == "Unpaid")">Non payé</option>
                        <option value="Draft" selected="@(statusFilter == "Draft")">Brouillon</option>
                        <option value="Overdue" selected="@(statusFilter == "Overdue")">En retard</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-filter"></i> Filtrer
                </button>
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary ml-2">
                    <i class="fas fa-sync-alt"></i> Réinitialiser
                </a>
            </form>
        </div>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i> Aucune facture trouvée.
        </div>
    }
    else
    {
        @foreach (var invoice in Model)
        {
            <div class="card invoice-card">
                <div class="card-header invoice-card-header d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="m-0">Facture: @invoice.Name</h5>
                        <small class="text-muted">Fournisseur: @invoice.SupplierName</small>
                    </div>
                    <div class="d-flex align-items-center">
                        <span class="status-badge @(invoice.Status == "Paid" ? "badge-paid" : 
                                                    invoice.Status == "Unpaid" ? "badge-unpaid" : 
                                                    invoice.Status == "Overdue" ? "badge-overdue" : 
                                                    "badge-draft")">
                            @invoice.Status
                        </span>
                        <!-- Bouton de téléchargement dynamique à côté du statut -->
                        <button class="btn btn-link download-btn ml-3" 
                                data-invoice-name="@invoice.Name" 
                                title="Télécharger PDF">
                            <i class="fas fa-download"></i> <!-- Icône de téléchargement -->
                        </button>
                    </div>
                </div>


                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="mb-3">
                                <span class="info-label">Date:</span>
                                <p class="info-value">@invoice.PostingDate</p>
                            </div>
                            <div class="mb-3">
                                <span class="info-label">Échéance:</span>
                                <p class="info-value">@invoice.DueDate</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <span class="info-label">Total:</span>
                                <p class="info-value">@invoice.Total.ToString("C")</p>
                            </div>
                            <div class="mb-3">
                                <span class="info-label">Total général:</span>
                                <p class="info-value">@invoice.GrandTotal.ToString("C")</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <span class="info-label">Montant dû:</span>
                                <p class="info-value @(invoice.OutstandingAmount > 0 ? "amount-negative" : "amount-positive")">
                                    @invoice.OutstandingAmount.ToString("C")
                                </p>
                            </div>
                            <div class="mb-3">
                                <span class="info-label">Devise:</span>
                                <p class="info-value">@invoice.Currency</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <span class="info-label">Société:</span>
                                <p class="info-value">@invoice.Company</p>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <span class="info-label">Payé:</span>
                                    <p class="info-value">@(invoice.IsPaid ? "Oui" : "Non")</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="items-table-container">
                        <h6 class="mt-4 mb-3"><i class="fas fa-boxes"></i> Articles</h6>
                        <div class="table-responsive scrollable-table">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Code</th>
                                        <th>Désignation</th>
                                        <th>Description</th>
                                        <th>Quantité</th>
                                        <th>Prix Unitaire</th>
                                        <th>Montant</th>
                                        <th>Unité</th>
                                        <th>Centre de coût</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in invoice.Items)
                                    {
                                        <tr>
                                            <td>@item.ItemCode</td>
                                            <td>@item.ItemName</td>
                                            <td>@item.Description</td>
                                            <td>@item.Quantity.ToString("N2")</td>
                                            <td>@item.Rate.ToString("C")</td>
                                            <td>@item.Amount.ToString("C")</td>
                                            <td>@item.UnitOfMeasure</td>
                                            <td>@item.CostCenter</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="card-footer invoice-card-footer d-flex justify-content-end">
                    @if (invoice.CanValidate)
                    {
                        <button class="btn btn-primary validate-btn" 
                                data-invoice-name="@invoice.Name"
                                title="Valider la facture">
                            <i class="fas fa-check-circle"></i> Valider
                        </button>

                    }
                    
                    @if (invoice.CanPay)
                    {
                        <a asp-action="PayInvoice" 
                        asp-controller="PurchaseInvoice" 
                        asp-route-invoiceName="@invoice.Name"
                        asp-route-amountDue="@invoice.OutstandingAmount"
                        class="btn btn-success">
                            Payer
                        </a>
                    }
                </div>
            </div>
        }

        <!-- Pagination -->
        <div class="row pagination-container">
            <div class="col-md-12">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1, status = statusFilter })" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>

                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { page = i, status = statusFilter })">@i</a>
                            </li>
                        }

                        <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1, status = statusFilter })" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>
@section Scripts{
<script>
        document.querySelectorAll('.download-btn').forEach(function(button) {
            button.addEventListener('click', async function() {
                var invoiceName = button.getAttribute('data-invoice-name');
                
                if (!invoiceName) {
                    alert("Le nom de la facture est manquant.");
                    return;
                }

                try {
                    // Utilisez FormData au lieu de JSON.stringify
                    const formData = new FormData();
                    formData.append('invoiceName', invoiceName);

                    const response = await fetch('/PurchaseInvoice/DownloadPurchaseInvoicePdf', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error('Erreur lors du téléchargement du PDF.');
                    }

                    const blob = await response.blob();
                    const link = document.createElement('a');
                    link.href = URL.createObjectURL(blob);
                    link.download = `Facture_${invoiceName}.pdf`;
                    link.click();
                } catch (error) {
                    console.error('Erreur:', error);
                    alert('Erreur lors du téléchargement du PDF: ' + error.message);
                }
            });
        });    
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".validate-btn").forEach(button => {
            button.addEventListener("click", async function () {
                const invoiceName = this.dataset.invoiceName;

                if (!invoiceName) {
                    alert("Nom de facture manquant");
                    return;
                }

                const confirmation = confirm(`Voulez-vous vraiment valider la facture : ${invoiceName} ?`);
                if (!confirmation) return;

                try {
                    const response = await fetch('/PurchaseInvoice/ValidateInvoice', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        },
                        body: `invoiceName=${encodeURIComponent(invoiceName)}`
                    });

                    if (response.redirected) {
                        window.location.href = response.url; // Rediriger après validation
                    } else {
                        const html = await response.text();
                        document.body.innerHTML = html;
                    }
                } catch (error) {
                    console.error("Erreur lors de la validation :", error);
                    alert("Erreur lors de la validation de la facture.");
                }
            });
        });
    });

</script>
}
